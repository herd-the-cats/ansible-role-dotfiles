---
# tasks file for dotfiles

- name: "Dotfiles main || Install required packages"
  package:
    name: "{{ dotf_packages }}"
    state: "present"
  become: true

- name: "Dotfiles main || Block for cloning dotfiles repo."
  block:
  - name: "Check for vault var presence"
    fail:
      msg: "The dotf_git_repo.key_vault var is undefined or empty."
    when: dotf_git_repo.key_vault is undefined or dotf_git_repo.key_vault | string | length < 1

  - name: "Dotfiles main || Check for root running role."
    fail:
      msg: >
        This role is intended to be run as a regular user, with the var dotf_root_too setting up
        root's dotfiles using become. To run this as root, please set dotf_root_too to false.
    when: lookup('pipe','id -u') == 0 and dotf_root_too

  - name: "Dotfiles main || Make sure .ssh directory exists"
    file:
      path: "{{ ansible_env.HOME }}/.ssh"
      state: "directory"
      owner: "{{ ansible_env.USER }}"
      group: "{{ ansible_env.USER }}"
      mode: 0700

  - name: "Dotfiles main || Make sure .ssh directory exists (root)"
    file:
      path: "/root/.ssh"
      state: "directory"
      owner: "root"
      group: "root"
      mode: 0700
    when: dotf_root_too
    become: true

  - name: "Dotfiles main || Copy git repo key from vault variable"
    copy:
      content: "{{ dotf_git_repo.key_vault }}\n"
      dest: "{{ dotf_git_repo.key }}"
      mode: 0400
      owner: "{{ ansible_env.USER }}"
      group: "{{ ansible_env.USER }}"
    no_log: true
    ignore_errors: "{{ ansible_check_mode }}"
    register: reg_repo_key_copy1
    changed_when: reg_repo_key_copy1.diff.after.state != 'file'

  - name: "Dotfiles main || Copy git repo key from vault variable (root)"
    copy:
      content: "{{ dotf_git_repo.key_vault }}"
      dest: "/root/.ssh/.ansible_dotfiles_key"
      mode: 0400
      owner: "root"
      group: "root"
    no_log: true
    ignore_errors: "{{ ansible_check_mode }}"
    register: reg_repo_key_copy2
    changed_when: dotf_root_too and reg_repo_key_copy2.diff.after.state != 'file'
    when: dotf_root_too
    become: true

  - name: "Dotfiles main || Clone dotfiles repo"
    git:
      repo: "{{ dotf_git_repo.url }}"
      dest: "{{ dotf_git_repo.path }}"
      version: "{{ dotf_git_repo.version }}"
      key_file: "{{ dotf_git_repo.key }}"
      update: true
      accept_hostkey: true
      force: true
# Environment must be set due to Ansible issue #33947, 20190808 version 2.8
    environment:
      TMPDIR: "{{ ansible_env.HOME + '/.ansible/tmp'}}"
    when:
    - dotf_git_repo is defined
    - dotf_git_repo.url | string | length > 0

  - name: "Dotfiles main || Clone dotfiles repo (root)"
    git:
      repo: "{{ dotf_git_repo.url }}"
      dest: "/root/.dotfiles"
      version: "{{ dotf_git_repo.version }}"
      key_file: "/root/.ssh/.ansible_dotfiles_key"
      update: true
      accept_hostkey: true
      force: true
# Environment must be set due to Ansible issue #33947, 20190808 version 2.8
    environment:
      TMPDIR: "{{ ansible_env.HOME + '/.ansible/tmp'}}"
    when:
    - dotf_git_repo is defined
    - dotf_git_repo.url | string | length > 0
    - dotf_root_too
    become: true

  always:
  - name: "Dotfiles main || Clean up the private key"
    file:
      path: "{{ dotf_git_repo.key }}"
      state: "absent"
    ignore_errors: "{{ ansible_check_mode }}"
    register: reg_repo_key_clean1
    changed_when: reg_repo_key_clean1.diff.after.state != 'absent'

  - name: "Dotfiles main || Clean up the private key (root)"
    file:
      path: "/root/.ssh/.ansible_dotfiles_key"
      state: "absent"
    ignore_errors: "{{ ansible_check_mode }}"
    register: reg_repo_key_clean2
    changed_when: dotf_root_too and reg_repo_key_clean2.diff.after.state != 'absent'
    when: dotf_root_too
    become: true

- name: "Dotfiles main || Create stow wrapper script"
  copy:
    src: "usr/bin/stow_wrapper.sh"
    dest: "/usr/bin/stow_wrapper.sh"
    owner: "root"
    group: "root"
    mode: 0755
  become: true

- name: "Dotfiles main || Run stow wrapper script on selected repo directories"
  command:
    argv:
    - "/usr/bin/stow_wrapper.sh"
    - "{{ dotf_git_repo.path | quote }}"
    - "{{ ansible_env.HOME | quote }}"
    - "{{ item | quote }}"
  loop: "{{ dotf_stow_list }}"
  register: reg_stow_result1

- name: "Dotfiles main || Run stow script on selected repo directories (root)"
  command:
    argv:
    - "/usr/bin/stow_wrapper.sh"
    - "/root/.dotfiles"
    - "/root"
    - "{{ item | quote }}"
  loop: "{{ dotf_stow_list }}"
  register: reg_stow_result2
  become: true
  when:
  - dotf_root_too
